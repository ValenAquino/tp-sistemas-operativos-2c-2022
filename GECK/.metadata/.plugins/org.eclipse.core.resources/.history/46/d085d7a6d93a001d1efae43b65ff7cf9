#include "../include/comunicaciones.h"

extern t_log* logger;

int crear_conexion(char* ip, char* puerto) {
	int socket_servidor;

	struct addrinfo condiciones, *servinfo;

	// pone 0 a los sizeof(hints) caracteres de hints
	memset(&condiciones, 0, sizeof(condiciones));

	condiciones.ai_family = AF_UNSPEC; // No importa si IPv4 o IPv6
	condiciones.ai_socktype = SOCK_STREAM;
	condiciones.ai_flags = AI_PASSIVE; // Flag para que use el IP de este dispositivo

	// Como estÃ¡ definido un IP no se tiene en cuenta la flag passive
	getaddrinfo(ip, puerto, &condiciones, &servinfo);

	// Creamos el socket de escucha del servidor
	socket_servidor = socket(
			servinfo->ai_family, servinfo->ai_socktype, servinfo->ai_protocol
	);

	// Asociamos el socket a un puerto
	bind(socket_servidor, servinfo->ai_addr, servinfo->ai_addrlen);

	log_trace(logger, "KERNEL escuchando en la IP: %s PUERTO: %s", ip, puerto);

	// Escuchamos las conexiones entrantes
	listen(socket_servidor, SOMAXCONN); // hay que cambiar SOMAXCONN por el grado de multiprogramacion

	freeaddrinfo(servinfo);
	log_trace(logger, "Listo para recibir consolas");

	return socket_servidor;
}

void liberar_conexion(int socket_cliente) {
	close(socket_cliente);
}


/////////////////////////////////

bool config_has_all_properties(t_config* cfg, char** properties) {
    for(uint8_t i = 0; properties[i] != NULL; i++) {
        if(!config_has_property(cfg, properties[i]))
            return false;
    }

    return true;
}

char* leer_archivo_completo(char* path) {
    FILE* fp = fopen(path, "r+");

    if(fp == NULL)
        return NULL;

    fseek(fp, 0L, SEEK_END);
    long lSize = ftell(fp);
    rewind(fp);

    char* text = calloc(1, lSize + 1);
    fread(text, lSize, 1, fp);
    fclose(fp);

    return text;
}

t_config* abrir_configuracion(char* path)
{
	t_config* config;

	config = config_create(path);

	return config;
}
