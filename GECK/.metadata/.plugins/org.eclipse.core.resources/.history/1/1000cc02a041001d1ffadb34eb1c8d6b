#include "../include/consola.h"

t_log* logger;

int main(int argc, char** argv) {
	char **array_segmentos;
	int tiempo_pantalla;

	// Level trace para que hagamos logs debugs y trace
	// As√≠ los logs minimos quedan al level info
	logger = log_create("Consola.log", "logger", true, LOG_LEVEL_TRACE);

	if (argc < 3) {
		log_error(logger, "Se necesitan mas argumentos para inicializar correctamente la consola");
		return EXIT_FAILURE;
	}

	char* config_path = argv[1];
	char* pseudo_path = argv[2];

	log_debug(logger, "config: %s", config_path);
	log_debug(logger, "pseudo: %s", pseudo_path);

	//t_list *instrucciones = parsear_pseudocod(pseudo_path);
	t_config* config = procesar_config(config_path, &array_segmentos, &tiempo_pantalla);
	int kernel_fd = connect_to_kernel(config);


	log_debug(logger, "kernel file descriptor: %d", kernel_fd);

	return liberar_memoria(logger, kernel_fd, config);
}

t_config* procesar_config(char *config_path, char ***array_segmentos, int* tiempo_pantalla) {
	t_config* config = config_create(config_path);

	if (config== NULL) {
		log_error(logger, "No se pudo abrir el archivo de configuracion en ese path");
		exit(EXIT_FAILURE);
	}

	*tiempo_pantalla = config_get_int_value(config, "TIEMPO_PANTALLA");
	*array_segmentos = config_get_array_value(config, "SEGMENTOS");

	log_info(logger, "tiempo_pantalla: %d", *tiempo_pantalla);

	for(int i=0; array_segmentos[i] != NULL; i++)
		log_debug(logger, "segmento[%d]: %s", i, (*array_segmentos)[i]);

	return config;
}

int connect_to_kernel(t_config* config) {
	char* ip = config_get_string_value(config, "IP_KERNEL");
	char* puerto = config_get_string_value(config, "PUERTO_KERNEL");

	log_info(logger, "Iniciando conexion con el Kernel - Puerto: %s - IP: %s", ip, puerto);

	return crear_conexion(ip, puerto);
}

int liberar_memoria(t_log* logg, int fd, t_config* config) {
	liberar_conexion(fd);
	config_destroy(config);
	log_destroy(logg);
	return EXIT_SUCCESS;
}

t_list* parsear_pseudocod(char* pseudo_path) {
	ts_instr inst;
	FILE* f_pseudo = fopen(pseudo_path, "r");
	t_list* lista_inst = list_create();

	if(f_pseudo == NULL) {
		log_error(logger, "No se ha podido abrir el archivo de pseudocodigo");
		exit(EXIT_FAILURE);
	}

	while(!feof(f_pseudo)) {

	}

	return lista_inst;
}
